// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// OrderServiceClient is the client API for OrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderServiceClient interface {
	CreateOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderID, error)
	RetrieveOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*Order, error)
	RetrieveOrdersByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (OrderService_RetrieveOrdersByUserIDClient, error)
}

type orderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderServiceClient(cc grpc.ClientConnInterface) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) CreateOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderID, error) {
	out := new(OrderID)
	err := c.cc.Invoke(ctx, "/service.OrderService/createOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RetrieveOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/service.OrderService/retrieveOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) RetrieveOrdersByUserID(ctx context.Context, in *UserID, opts ...grpc.CallOption) (OrderService_RetrieveOrdersByUserIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_OrderService_serviceDesc.Streams[0], "/service.OrderService/retrieveOrdersByUserID", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceRetrieveOrdersByUserIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OrderService_RetrieveOrdersByUserIDClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type orderServiceRetrieveOrdersByUserIDClient struct {
	grpc.ClientStream
}

func (x *orderServiceRetrieveOrdersByUserIDClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// OrderServiceServer is the server API for OrderService service.
// All implementations must embed UnimplementedOrderServiceServer
// for forward compatibility
type OrderServiceServer interface {
	CreateOrder(context.Context, *OrderRequest) (*OrderID, error)
	RetrieveOrder(context.Context, *OrderID) (*Order, error)
	RetrieveOrdersByUserID(*UserID, OrderService_RetrieveOrdersByUserIDServer) error
	//mustEmbedUnimplementedOrderServiceServer()
}

// UnimplementedOrderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServiceServer struct {
}

func (UnimplementedOrderServiceServer) CreateOrder(context.Context, *OrderRequest) (*OrderID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedOrderServiceServer) RetrieveOrder(context.Context, *OrderID) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetrieveOrder not implemented")
}
func (UnimplementedOrderServiceServer) RetrieveOrdersByUserID(*UserID, OrderService_RetrieveOrdersByUserIDServer) error {
	return status.Errorf(codes.Unimplemented, "method RetrieveOrdersByUserID not implemented")
}
func (UnimplementedOrderServiceServer) mustEmbedUnimplementedOrderServiceServer() {}

// UnsafeOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServiceServer will
// result in compilation errors.
type UnsafeOrderServiceServer interface {
	mustEmbedUnimplementedOrderServiceServer()
}

func RegisterOrderServiceServer(s grpc.ServiceRegistrar, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OrderService/createOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CreateOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RetrieveOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).RetrieveOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.OrderService/retrieveOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).RetrieveOrder(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_RetrieveOrdersByUserID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderServiceServer).RetrieveOrdersByUserID(m, &orderServiceRetrieveOrdersByUserIDServer{stream})
}

type OrderService_RetrieveOrdersByUserIDServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type orderServiceRetrieveOrdersByUserIDServer struct {
	grpc.ServerStream
}

func (x *orderServiceRetrieveOrdersByUserIDServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "service.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createOrder",
			Handler:    _OrderService_CreateOrder_Handler,
		},
		{
			MethodName: "retrieveOrder",
			Handler:    _OrderService_RetrieveOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "retrieveOrdersByUserID",
			Handler:       _OrderService_RetrieveOrdersByUserID_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "OrderService.proto",
}
